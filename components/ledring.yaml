esphome:
  on_boot:
    priority: 600
    then:
      - light.turn_on:
          id: led_ring
          red: 0.0
          green: 0.0
          blue: 1.0
          effect: "Scan"

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    gamma_correct: 1.5  # Adjust gamma correction
    pin: GPIO4
    num_leds: ${num_leds}
    name: "LED ring"
    id: led_ring
    effects:
      - random:
      - random:
          name: "Random Slow"
          transition_length: 30s
          update_interval: 30s
      - addressable_rainbow:
          name: "Rainbow Spinner"
          speed: 8
          width: "${num_leds}"
      - addressable_rainbow:
          name: "Rainbow Fader"
          speed: 3
          width: "${num_leds}"
      - addressable_lambda:
          name: "Fire"
          update_interval: 50ms
          lambda: |-
            int Cooling = 55;
            int Sparking = 110;
            static byte heat[188];
            int cooldown;

            for (int i = 0; i < it.size(); i++) {
              cooldown = random(0, ((Cooling * 10) / it.size()) + 2);

              if (cooldown > heat[i]) {
                heat[i] = 0;
              } else {
                heat[i] = heat[i] - cooldown;
              }
            }

            for (int k = it.size() - 1; k >= 2; k--) {
              heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
            }

            if (random(255) < Sparking) {
              int y = random(7);
              heat[y] = heat[y] + random(160, 255);
            }

            for (int Pixel = 0; Pixel < it.size(); Pixel++) {
              byte t192 = round((heat[Pixel] / 255.0) * 191);
              byte heatramp = (t192 & 0x3F) << 2;

              if (t192 > 0x80) {
                it[Pixel] = ESPColor(255, 255, heatramp);
              } else if (t192 > 0x40) {
                it[Pixel] = ESPColor(255, heatramp, 0);
              } else {
                it[Pixel] = ESPColor(heatramp, 0, 0);
              }
            }
      - addressable_lambda:
          name: "Wipe In"
          update_interval: 12ms
          lambda: |-
            static int x = 0;
            if (initial_run) {
              x = 0;
              it.all() = ESPColor::BLACK;
            }
            if (x < it.size()) {
              it[x] = current_color;
              x += 1;
            }
      - addressable_lambda:
          name: "Wipe Out"
          update_interval: 12ms
          lambda: |-
            static int x = 0;
            if (initial_run) {
              x = it.size();
            }
            if (x > 0) {
              x -= 1; 
              it[x] = ESPColor::BLACK;
            }
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_twinkle:
      - addressable_scan:
      - addressable_color_wipe:
      - flicker:
      - strobe:
      - pulse: